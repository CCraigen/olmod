// Warning: Some assembly references could not be resolved automatically. This might lead to incorrect decompilation of some parts,
// for ex. property getter/setter access. To get optimal decompilation results, please manually add the missing references to the list of loaded assemblies.
// GameMod, Version=0.5.13.0, Culture=neutral, PublicKeyToken=null
// GameMod.TelemetryMod
using System.Collections;
using System.Net;
using System.Net.Sockets;
using System.Text;
using GameMod;
using HarmonyLib;
using Overload;
using UnityEngine;
using UnityEngine.Networking;

namespace GameMod
{
internal class TelemetryMod
{
	[HarmonyPatch(typeof(PlayerShip), "FixedUpdateProcessControlsInternal")]
	private class TelemetryMod_PlayerShip_FixedUpdateProcessControlsInternal
	{
		private static void Prefix()
		{
			if (telemetry_enabled)
			{
				event_primary_fire = (GameManager.m_local_player.IsPressed((CCInput)14) ? 1f : 0f);
				event_secondary_fire = (GameManager.m_local_player.IsPressed((CCInput)15) ? 1f : 0f);
			}
		}
	}

	[HarmonyPatch(typeof(Item), "PlayItemPickupFX")]
	private class TelemetryMod_Item_PlayItemPickupFX
	{
		private static void Postfix(Player player)
		{
			if (telemetry_enabled && !((Object)(object)player == (Object)null) && ((NetworkBehaviour)player).isLocalPlayer)
			{
				event_secondary_fire = 1f;
			}
		}
	}

	[HarmonyPatch(typeof(PlayerShip), "ApplyDamage")]
	private class TelemetryMod_PlayerShip_ApplyDamage
	{
		private static void Postfix(DamageInfo di, PlayerShip __instance)
		{
			//IL_0028: Unknown result type (might be due to invalid IL or missing references)
			if (telemetry_enabled && !((Object)(object)__instance == (Object)null) && ((NetworkBehaviour)__instance).isLocalPlayer)
			{
				event_damage_taken += di.damage;
			}
		}
	}

	[HarmonyPatch(typeof(GameManager), "FixedUpdate")]
	private class TelemetryMod_GameManager_FixedUpdate
	{
		private static void Postfix()
		{
			if (!initialized & ((Object)(object)GameManager.m_local_player != (Object)null))
			{
				initialized = true;
				udpSenderObject = new GameObject("UdpTelemetrySender");
				telemetryComponent = udpSenderObject.AddComponent<Telemetry>();
				telemetryComponent.IP = "127.0.0.1";
				telemetryComponent.port = 4123;
			}
			else if (initialized)
			{
				event_boosting = (GameManager.m_local_player.c_player_ship.m_boosting ? 1f : 0f);
				if ((int)GameplayManager.m_gameplay_state == 0)
				{
					Rigidbody c_rigidbody = GameManager.m_local_player.c_player_ship.c_rigidbody;
					Quaternion rotation = c_rigidbody.rotation;
					Vector3 eulerAngles = ((Quaternion)(ref rotation)).eulerAngles;
					Vector3 val = ((Component)c_rigidbody).transform.InverseTransformDirection(c_rigidbody.angularVelocity);
					Vector3 val2 = ((Component)c_rigidbody).transform.InverseTransformDirection(c_rigidbody.velocity);
					Telemetry.Telemetry_SendTelemetry(((double)eulerAngles.z > 180.0) ? (eulerAngles.z - 360f) : eulerAngles.z, ((double)eulerAngles.x > 180.0) ? (eulerAngles.x - 360f) : eulerAngles.x, ((double)eulerAngles.y > 180.0) ? (eulerAngles.y - 360f) : eulerAngles.y, val.z, val.x, val.y, val2.x, val2.y, val2.z, event_boosting, event_primary_fire, event_secondary_fire, event_picked_up_item, event_damage_taken);
				}
				else
				{
					Telemetry.Telemetry_SendTelemetry(0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f);
				}
				event_boosting = 0f;
				event_primary_fire = 0f;
				event_secondary_fire = 0f;
				event_picked_up_item = 0f;
				event_damage_taken = 0f;
			}
		}
	}

	private class PlayerData
	{
		public float Roll;

		public float Pitch;

		public float Yaw;

		public float Heave;

		public float Sway;

		public float Surge;

		public float Extra1;

		public float Extra2;

		public float Extra3;

		public float EventBoosting;

		public float EventPrimaryFire;

		public float EventSecondaryFire;

		public float EventItemPickup;

		public float EventDamageTaken;

		public PlayerData()
		{
		}

		public PlayerData(float Roll, float Pitch, float Yaw, float Heave, float Sway, float Surge, float Extra1, float Extra2, float Extra3, float Boosting, float PrimaryFire, float SecondaryFire, float ItemPickup, float DamageTaken)
		{
			this.Roll = Roll;
			this.Pitch = Pitch;
			this.Yaw = Yaw;
			this.Heave = Heave;
			this.Sway = Sway;
			this.Surge = Surge;
			this.Extra1 = Extra1;
			this.Extra2 = Extra2;
			this.Extra3 = Extra3;
			EventBoosting = Boosting;
			EventPrimaryFire = PrimaryFire;
			EventSecondaryFire = SecondaryFire;
			EventItemPickup = ItemPickup;
			EventDamageTaken = DamageTaken;
		}
	}

	public class Telemetry : MonoBehaviour
	{
		public string IP = "127.0.0.1";

		public int port = 4123;

		private IPEndPoint remoteEndPoint;

		private static UdpClient client;

		private static PlayerData local_player_data;

		private void Start()
		{
			Object.DontDestroyOnLoad((Object)(object)((Component)this).gameObject);
			remoteEndPoint = new IPEndPoint(IPAddress.Parse(IP), port);
			client = new UdpClient();
			local_player_data = new PlayerData();
			((MonoBehaviour)this).StartCoroutine("Telemetry_Start");
		}

		public static void Telemetry_SendTelemetry(float Roll, float Pitch, float Yaw, float Heave, float Sway, float Surge, float Extra1, float Extra2, float Extra3, float Boosting, float PrimaryFire, float SecondaryFire, float ItemPickup, float DamageTaken)
		{
			local_player_data = new PlayerData(Roll, Pitch, Yaw, Heave, Sway, Surge, Extra1, Extra2, Extra3, Boosting, PrimaryFire, SecondaryFire, ItemPickup, DamageTaken);
		}

		private IEnumerator Telemetry_Start()
		{
			while (true)
			{
				string info = $"{local_player_data.Roll};{local_player_data.Pitch};{local_player_data.Yaw};{local_player_data.Heave};{local_player_data.Sway};{local_player_data.Surge};{local_player_data.Extra1};{local_player_data.Extra2};{local_player_data.Extra3};{local_player_data.EventBoosting};{local_player_data.EventPrimaryFire};{local_player_data.EventSecondaryFire};{local_player_data.EventItemPickup};{local_player_data.EventDamageTaken}";
				byte[] data = Encoding.Default.GetBytes(info);
				client.Send(data, data.Length, remoteEndPoint);
				yield return null;
			}
		}
	}

	private static bool telemetry_enabled = true;

	private static float event_boosting = 0f;

	private static float event_primary_fire = 0f;

	private static float event_secondary_fire = 0f;

	private static float event_picked_up_item = 0f;

	private static float event_damage_taken = 0f;

	private static Telemetry telemetryComponent;

	private static bool initialized = false;

	private static GameObject udpSenderObject;
	
	}
}
